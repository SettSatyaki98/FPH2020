# -*- coding: utf-8 -*-
"""Object_detection_with_voice_output.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g6CmCVyF5OX0BrqEGCA54YoFCKWO1tbP
"""


import numpy as np
import os
#import six.moves.urllib as urllib
#import sys
#import tarfile

import tensorflow as tf
print(tf.__version__)
#import zipfile

from distutils.version import StrictVersion
#from collections import defaultdict
#from io import StringIO
#from matplotlib import pyplot as plt
#from PIL import Image

"""This is needed since the notebook is stored in the object_detection folder."""

from object_detection.utils import ops as utils_ops
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as vis_util
from gtts import gTTS 
from googletrans import Translator
from datetime import datetime
from playsound import playsound
import json
import wget
MODEL_NAME = 'inference_graph'
PATH_TO_FROZEN_GRAPH = MODEL_NAME + '/frozen_inference_graph.pb'
PATH_TO_LABELS = 'training/labelmap.pbtxt'

detection_graph = tf.Graph()
with detection_graph.as_default():
  od_graph_def = tf.GraphDef()
  with tf.gfile.GFile(PATH_TO_FROZEN_GRAPH, 'rb') as fid:
    serialized_graph = fid.read()
    od_graph_def.ParseFromString(serialized_graph)
    tf.import_graph_def(od_graph_def, name='')

def run_inference_for_single_image(image, graph):
    if 'detection_masks' in tensor_dict:
        # The following processing is only for single image
        detection_boxes = tf.squeeze(tensor_dict['detection_boxes'], [0])
        detection_masks = tf.squeeze(tensor_dict['detection_masks'], [0])
        # Reframe is required to translate mask from box coordinates to image coordinates and fit the image size.
        real_num_detection = tf.cast(tensor_dict['num_detections'][0], tf.int32)
        detection_boxes = tf.slice(detection_boxes, [0, 0], [real_num_detection, -1])
        detection_masks = tf.slice(detection_masks, [0, 0, 0], [real_num_detection, -1, -1])
        detection_masks_reframed = utils_ops.reframe_box_masks_to_image_masks(
            detection_masks, detection_boxes, image.shape[0], image.shape[1])
        detection_masks_reframed = tf.cast(
            tf.greater(detection_masks_reframed, 0.5), tf.uint8)
        # Follow the convention by adding back the batch dimension
        tensor_dict['detection_masks'] = tf.expand_dims(
            detection_masks_reframed, 0)
    image_tensor = tf.get_default_graph().get_tensor_by_name('image_tensor:0')

    # Run inference
    output_dict = sess.run(tensor_dict,
                            feed_dict={image_tensor: np.expand_dims(image, 0)})

    # all outputs are float32 numpy arrays, so convert types as appropriate
    output_dict['num_detections'] = int(output_dict['num_detections'][0])
    output_dict['detection_classes'] = output_dict[
        'detection_classes'][0].astype(np.uint8)
    output_dict['detection_boxes'] = output_dict['detection_boxes'][0]
    output_dict['detection_scores'] = output_dict['detection_scores'][0]
    if 'detection_masks' in output_dict:
        output_dict['detection_masks'] = output_dict['detection_masks'][0]
    #print(output_dict)
    return output_dict

numtext = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen']

def create_dict(objlist, score, language, frameno, play_audio, short_audio):
  main_dict = {}
  for i in range(len(objlist)):
    temp = {}
    temp['object name']  = objlist[i]
    temp['score'] = score[i]
    if(objlist[i][0] == 'a' or objlist[i][0] == 'e' or objlist[i][0] == 'i' or objlist[i][0] == 'o' or objlist[i][0] == 'u'):
    	string = 'An '
    else:
    	string = 'A '
    string+=objlist[i]
    string+=' has been detected with '
    string+=str(score[i])
    string+='% confidence.'
    
    temp['sentence'] = string
    translator = Translator()
    translated_text = translator.translate(string, dest = language).text
    
    temp['translated sentence'] = translated_text
    now = datetime.now()
    current_time = now.strftime("%H%M%S")
    myfilename = 'audio'+'frame'+str(frameno)+'_object'+str(i+1)+'_'+str(current_time)+'.mp3'
    myobj = gTTS(text=translated_text, lang=language, slow=False) 
    if(os.path.isdir('audiodata') == False):
    	os.mkdir('audiodata')
    myobj.save('audiodata/'+ myfilename)
    if(play_audio): 
    	playsound('audiodata/'+ myfilename)
    temp['audio filename'] = myfilename
    
    main_dict['object' + str(i+1)] = temp
  now = datetime.now()
  current_time = now.strftime("%H_%M_%S")
  if(os.path.isdir('framedata') == False):
    	os.mkdir('framedata')
  out_file = open("framedata/frame"+str(current_time)+".json", "w") 
  json.dump(main_dict, out_file, indent = 4) 
  out_file.close() 
  #print(main_dict)
  
  if(short_audio):
  	gen_wav_from_data(objlist, language)
  
def gen_wav_from_data(mylist, language):
  objlist = []
  count = []
  for ele in mylist:
    match_found = 0
    for t in objlist:
      if t == ele:
        #count update
        i = objlist.index(t)
        count[i]+=1
        match_found = 1
    if match_found == 0:    
      objlist.append(ele)
      count.append(1)
  mytext = ''
  for i in range(len(objlist)):
    if count[i] == 1:
      mytext = mytext +' ' + numtext[1] + ' '
      mytext+=objlist[i]
      mytext+=','
    else:
      mytext= mytext + ' ' + numtext[count[i]] + ' '
      mytext+=objlist[i]
      mytext+='s'
      mytext+=','

  #mytext = 'hello world'
  #print('mytext')
  print(mytext)
  translator = Translator()
  mytext = translator.translate(mytext, dest = language).text
  print(mytext)
  myobj = gTTS(text=mytext, lang=language, slow=False) 
  myobj.save("temp.mp3")
  playsound("temp.mp3")

  

def main_detection(image_np, frameno, detail_audio, short_audio):
	detect_list = []
	score_list = []
	image_np_expanded = np.expand_dims(image_np, axis=0)
        # Actual detection.
	output_dict = run_inference_for_single_image(image_np, detection_graph)
         #print(output_dict)
         #cv2.imshow('object_detection', image_np)
                    # Visualization of the results of a detection.
	vis_util.visualize_boxes_and_labels_on_image_array(
                image_np,
                output_dict['detection_boxes'],
                output_dict['detection_classes'],
                output_dict['detection_scores'],
                category_index,
                instance_masks=output_dict.get('detection_masks'),
                use_normalized_coordinates=True,
                line_thickness=8)
            
	cv2.imshow('object_detection', image_np)
	if(from_image):
       		cv2.waitKey()
	for v in range(len(output_dict['detection_scores'])):        
		if output_dict['detection_scores'][v] > 0.5:
			detect_list.append(category_index[output_dict['detection_classes'][v]]['name'])
			score_list.append(int(output_dict['detection_scores'][v]*100))
		else:
			break
	cv2.imwrite('roadsout.JPG', cv2.resize(image_np, (800, 600)))
	if(detail_audio or short_audio):
		create_dict(detect_list, score_list, language, frameno, detail_audio, short_audio)
import cv2

#cap = cv2.VideoCapture(0)

category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS, use_display_name=True)
#print(category_index)


language = input('1.Engligh - en\n2.Bengali - bn\n3.Spanish - es\n')
from_image = False
with detection_graph.as_default():
    with tf.compat.v1.Session() as sess:
                # Get handles to input and output tensors
            ops = tf.get_default_graph().get_operations()
            all_tensor_names = {output.name for op in ops for output in op.outputs}
            tensor_dict = {}
            for key in [
              'num_detections', 'detection_boxes', 'detection_scores',
              'detection_classes', 'detection_masks'
            ]:
                tensor_name = key + ':0'
                if tensor_name in all_tensor_names:
                    tensor_dict[key] = tf.get_default_graph().get_tensor_by_name(
                  tensor_name)

               
                #change this path string with the 'location/filename.extension' of the target image on which test is to be conducted
            choice = int(input('1.from local file\n2.from url\n3.from live video\n'))
            if(choice == 2):
            	url = input('Enter url:')
            	path = wget.download(url)
            	image_np = cv2.imread(path)
            	from_image = True
            	main_detection(image_np, 0, True, False)
            elif(choice == 1):
            	path = 'testimage.jpg'
            	image_np = cv2.imread(path)
            	from_image = True
            	main_detection(image_np, 0, True, False)
            elif(choice == 3):
            	cap = cv2.VideoCapture(0)
            	frameno = 0
            	while(True):
            		ret, image_np = cap.read()
            		detail_audio = False
            		short_audio = False
            		
            		response = cv2.waitKey(1) & 0xFF
            		if response == ord('p'):
            			detail_audio = True
            			#main_detection(image_np, detail_audio, short_audio)
            		if response == ord('s'):
            			short_audio = True
            		main_detection(image_np, frameno, detail_audio, short_audio)
            		if response == ord('q'):
            			cap.release()
            			cv2.destroyAllWindows()
            			break
            			frameno+=1
